# import ctypes

# # Load the executable into memory
# executable = open(r'C:\Users\John Emro\Documents\GitHub\malware-crypter\MW_onmemory\calculator.exe', 'rb').read()
# buffer_size = len(executable)
# allocation_size = buffer_size + (0x1000 - buffer_size % 0x1000)  # round up to nearest page size
# allocation_base = ctypes.windll.kernel32.VirtualAlloc(None, allocation_size, 0x3000, 0x40)
# print("allocation_base: ", allocation_base)
# PAGE_READWRITE = 0x04
# old_protect = ctypes.c_ulong(0)
# ctypes.windll.kernel32.VirtualProtect(allocation_base, buffer_size, PAGE_READWRITE, ctypes.byref(old_protect))

# if not allocation_base:
#     raise ctypes.WinError()
# ctypes.memmove(allocation_base, executable, buffer_size)
# # Get a function pointer to the entry point of the executable
# entry_point = ctypes.cast(allocation_base, ctypes.CFUNCTYPE(None))

# # Call the entry point
# entry_point()

import ctypes

# Load the executable into memory
executable = open(r'C:\Users\John Emro\Documents\GitHub\malware-crypter\MW_onmemory\calculator.exe', 'rb').read()
buffer_size = len(executable)
allocation_size = buffer_size + (0x1000 - buffer_size % 0x1000)  # round up to nearest page size
allocation_base = ctypes.windll.kernel32.VirtualAlloc(None, allocation_size, 0x3000, 0x40)
print("allocation_base: ", allocation_base)
PAGE_READWRITE = 0x04
old_protect = ctypes.c_ulong(0)
ctypes.windll.kernel32.VirtualProtect(allocation_base, buffer_size, PAGE_READWRITE, ctypes.byref(old_protect))

if not allocation_base:
    raise ctypes.WinError()
ctypes.memmove(allocation_base, executable, buffer_size)
# Get a function pointer to the entry point of the executable
entry_point = ctypes.cast(allocation_base, ctypes.CFUNCTYPE(None))

# Call the entry point
entry_point()