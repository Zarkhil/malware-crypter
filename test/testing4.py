import os
import sys
import ctypes
from cryptography.fernet import Fernet

# You should have your encrypted DLL and the Fernet key
encrypted_dll_file = sys.argv[1]
input_filename_w_extention = os.path.basename(encrypted_dll_file)
# remove the .exe extension
input_filename = input_filename_w_extention[:-4]
output_filename = input_filename
output_path = os.getcwd()

key = Fernet.generate_key()
cipher = Fernet(key)

# Read the encrypted DLL
with open(encrypted_dll_file, 'rb') as f:
    encrypted_dll_data = f.read()

# decrypted_dll_data = cipher.decrypt(encrypted_dll_data)
decrypted_dll_data = encrypted_dll_data

# Save the decrypted DLL to a temporary file
temp_dll_path = "temp_decrypted.dll"
with open(temp_dll_path, "wb") as temp_dll_file:
    temp_dll_file.write(decrypted_dll_data)

# Load the DLL into memory
dll_handle = ctypes.windll.kernel32.LoadLibraryA(temp_dll_path.encode('utf-8'))

# # Remove the temporary DLL file
# os.remove(temp_dll_path)

# Call the exported function from the DLL (change 'ExportedFunctionName' to the actual exported function name)
exported_function = ctypes.CFUNCTYPE(ctypes.c_int)(("ExportedFunctionName", ctypes.windll.kernel32))
result = exported_function()

# Free the DLL from memory
ctypes.windll.kernel32.FreeLibrary(dll_handle)
