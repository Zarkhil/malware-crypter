import subprocess
import sys
import chardet
from cryptography.fernet import Fernet
import os
import base64

input_file = sys.argv[1]
input_filename_w_extention = os.path.basename(input_file)
# remove the .exe extension
input_filename = input_filename_w_extention[:-4]
output_filename = input_filename
output_path = os.getcwd()

# Generate the encryption key
key = Fernet.generate_key()

# Create the Fernet object
cipher = Fernet(key)

# Read in the binary data of the software to encrypt
with open(input_file, 'rb') as f:
    data = f.read()

# Encrypt the binary data
encrypted_data = cipher.encrypt(data)
encrypted_software_base64 = base64.b64encode(encrypted_data).decode('utf-8')
print(data[:50])
print(encrypted_data[:50])
print(encrypted_software_base64[:50])

# Encode the key and encrypted data as base64 strings
# key_b64 = base64.urlsafe_b64encode(key).decode('ascii')
# data_b64 = base64.urlsafe_b64encode(encrypted_data).decode('ascii')

# key_b64 = key
# data_b64 = encrypted_data

# Write the key and encrypted data to a Python script
# with open('decrypt_and_run.py', 'w') as f:
#     f.write(f"import base64\nimport subprocess\nfrom cryptography.fernet import Fernet\n\nkey = {key!r}\ncipher = Fernet(key)\ndata = {data_b64}\n\n# Decrypt the content\ndecrypted_data = cipher.decrypt(data)\n\n# Run the decrypted binary in a subprocess\nresult = subprocess.run(list(decrypted_data), stdout=subprocess.PIPE)\n\n# Print the output to the console\nprint(result.stdout)\n")

# # Use PyInstaller to create a single executable
# subprocess.run(['pyinstaller', '--onefile', 'decrypt_and_run.py'])

# # Delete the unencrypted script and the key
# os.remove('decrypt_and_run.py')
# os.remove('key.key')





# import base64
# import subprocess
# from cryptography.fernet import Fernet
# cipher = Fernet(base64.urlsafe_b64decode('{key_b64}'))
# data = base64.urlsafe_b64decode('{data_b64}')

# # Decrypt the content
# decrypted_data = cipher.decrypt(data)

# # Run the decrypted binary in a subprocess
# result = subprocess.run(decrypted_data, stdout=subprocess.PIPE)

# # Print the output to the console
# print(result.stdout)")