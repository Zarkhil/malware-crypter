from cryptography.fernet import Fernet
import subprocess
import os
import shutil
import sys
import base64

input_file = sys.argv[1]
input_filename_w_extention = os.path.basename(input_file)
# remove the .exe extension
input_filename = input_filename_w_extention[:-4]
output_filename = input_filename
output_path = os.getcwd()

# Encrypt the software
key = Fernet.generate_key()
cipher = Fernet(key)
with open(input_file, "rb") as f:
    encrypted_data = cipher.encrypt(f.read())

encrypted_software_base64 = base64.b64encode(encrypted_data).decode('utf-8')

# decryptor code
decryptor_code = f"""
import os
import base64
import tempfile
from cryptography.fernet import Fernet

key = {key!r}
cipher = Fernet(key)

encrypted_data = {encrypted_data}

# decrypt the content
decrypted_data = cipher.decrypt(encrypted_data)

# create a temporary file and write the decrypted content to it
with tempfile.NamedTemporaryFile(suffix='.exe', delete=False) as tmp_file:
    tmp_file.write(decrypted_data)

# close the file to allow execution
tmp_file.close()

# execute the decrypted file
os.system(f'start {{tmp_file.name}}')
"""

decryptor_script_path = f"{output_path}\GEN_{output_filename}.pyw"

with open(decryptor_script_path, "w") as f:
    f.write(decryptor_code)

# Compile the decryptor code into an executable
subprocess.call(["pyinstaller", "--onefile", decryptor_script_path])

# Remove unnecessary files/folders generated by pyinstaller
os.remove(f'GEN_{input_filename}.spec')
shutil.rmtree('build')
shutil.move(f'{output_path}\dist\GEN_{input_filename}.exe', f'{output_path}\GEN_{output_filename}.exe')
shutil.rmtree('dist')
os.remove(decryptor_script_path)